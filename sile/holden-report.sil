% Set a default monospace body font (JetBrains Mono)
\font[family=JetBrains Mono, size=10pt]

% Masters disabled for SILE 0.15.13 compatibility; using manual \pagetop and \pagebottom spacing.

% Color palette and baseline grid
\use[module=packages.color]
\set[parameter=document.baselineskip, value=12pt]

% Theme wrappers (single source of colors)
\define[command=Ink]{\color[color=#111111]{\process}}
\define[command=Subtle]{\color[color=#666666]{\process}}
\define[command=Accent]{\color[color=#005ea5]{\process}}

% Monospace headers
\define[command=reporttitle]{
  \font[family=JetBrains Mono, weight=700, size=16pt]{\Ink{\process}}
  \par
}

\define[command=sectiontitle]{
  \font[family=JetBrains Mono, weight=700, size=14pt]{\Ink{\process}}
  \par
}

% Simple section box wrapper
\define[command=sectionbox]{
  \skip[height=0.75em]
  \process
  \skip[height=0.75em]
}

% Running header text (used by book class' running headers)
\define[command=hrHeader]{
  \font[family=JetBrains Mono, weight=700, size=12pt]{\Accent{Holdenâ€™s Daily Report}}
}

% Footer with page number (uses SILE folio counter if available)
\define[command=pagefooter]{
  \skip[height=1em]
  \Subtle{\font[family=JetBrains Mono, size=9pt]{
    Page \lua{
      local folio = (SILE and SILE.scratch and SILE.scratch.counters and SILE.scratch.counters.folio and SILE.scratch.counters.folio.value) or 1
      SILE.typesetter:typeset(tostring(folio))
    }
  }}
  \par
}

% Minimal frame-like vertical spacing to simulate top/bottom margins
\define[command=pagetop]{
  \skip[height=0.75in]
}
\define[command=pagebottom]{
  \skip[height=0.5in]
}

% Load report data via a standard JSON library if available
\define[command=loaddata]{
  \lua{
    -- Allow local vendored libs if later added (sile/lib/?.lua)
    local added = "sile/lib/?.lua;"
    if not string.find(package.path, added, 1, true) then
      package.path = added .. package.path
    end

    -- Try common JSON libraries in order (no custom parsers)
    local candidates = { "cjson.safe", "cjson", "dkjson", "json" }
    local json, libname
    for _, name in ipairs(candidates) do
      local ok, mod = pcall(require, name)
      if ok and mod then
        json, libname = mod, name
        break
      end
    end
    SILE.scratch.json = json
    SILE.scratch.json_lib = libname

    local path = os.getenv("REPORT_DATA_JSON") or "data/data.json"
    SILE.scratch.report_data_path = path

    local fh = io.open(path, "rb")
    if not fh then
      SILE.typesetter:typeset("Could not open data file: " .. path)
      return
    end
    local content = fh:read("*a")
    fh:close()

    if not json then
      SILE.typesetter:typeset("No JSON library found (tried cjson.safe, cjson, dkjson, json).")
      return
    end

    local ok, data
    if json.decode then
      ok, data = pcall(json.decode, content)
    elseif json.parse then
      ok, data = pcall(json.parse, content)
    else
      ok, data = false, nil
    end
    if not ok or type(data) ~= "table" then
      SILE.typesetter:typeset("Failed to parse JSON with " .. tostring(libname or "unknown"))
      return
    end

    SILE.scratch.report_data = data
  }
}

% JSON helper to load a file into a Lua table using the shared library
\lua{
  function SILE.scratch.load_json_file(path)
    local fh = io.open(path, "rb")
    if not fh then return nil, "open" end
    local content = fh:read("*a"); fh:close()
    local json = SILE.scratch.json
    if not json then return nil, "jsonlib" end
    local decode = json.decode or json.parse
    if not decode then return nil, "decode" end
    local ok, data = pcall(decode, content)
    if not ok or type(data) ~= "table" then return nil, "parse" end
    return data
  end
}

% Render a minimal overview of loaded data into a section box
\define[command=renderdataoverview]{
  \lua{
    local data = SILE.scratch.report_data
    if not data then
      local lib = SILE.scratch.json_lib or "none"
      SILE.typesetter:typeset("Data not loaded; JSON lib: " .. tostring(lib) .. ".")
      return
    end
    local sections = (type(data.sections) == "table") and data.sections or {}
    local order = { "rss", "wikipedia", "api_spend", "youtube", "facebook", "caldav", "weather" }
    local parts = {}
    for _, key in ipairs(order) do
      local sec = sections[key]
      local count = 0
      if type(sec) == "table" then
        if key == "wikipedia" then
          count = (type(sec.summary) == "string" and #sec.summary > 0) and 1 or 0
        elseif type(sec.items) == "table" then
          count = #sec.items
        end
      end
      parts[#parts + 1] = key .. "=" .. tostring(count)
    end
    SILE.typesetter:typeset("Sections: " .. table.concat(parts, "; "))
  }
}
