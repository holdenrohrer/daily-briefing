% Set a default monospace body font (JetBrains Mono)
\font[family=JetBrains Mono, size=10pt]

% Frames and running header/footer are defined by the custom Lua class (classes/holden-report.lua).

% Color palette and baseline grid
\use[module=packages.color]
\use[module=packages.lists]
\use[module=packages.rules]
% \use[module=packages.framebox] (disabled; using fallback sectionbox)
\set[parameter=document.baselineskip, value=12pt]
\set[parameter=document.parindent, value=0pt]
\set[parameter=current.parindent, value=0pt]

% Theme wrappers (single source of colors)
\define[command=Ink]{\color[color=#111111]{\process}}
\define[command=Subtle]{\color[color=#666666]{\process}}
\define[command=Accent]{\color[color=#005ea5]{\process}}
\define[command=Gold]{\color[color=#c9b458]{\process}}

% Monospace headers
\define[command=reporttitle]{
  \font[family=JetBrains Mono, weight=700, size=16pt]{\Ink{\process}}
  \par
}

\define[command=needspace]{
  \skip[height=0pt plus 3in]
  \break
  \skip[height=0pt plus -3in]
}

\define[command=sectiontitle]{
  \font[family=JetBrains Mono, weight=700, size=14pt]{\Ink{\process}}
  \par
  \skip[height=.25em]
}

% Section box using typesetter:liner for per-line vertical gold rules.
\lua{
  do
    local class = SILE.documentState.documentClass

    local function toNum(x)
      if type(x) == "table" and x.tonumber then return x:tonumber() end
      return x or 0
    end

    class:registerCommand("sectionbox", function (options, content)
      local borderw = options.border or "0.8pt"
      local color = options.color or "#c9b458"
      local topGap = options.topgap or "0.35em"
      local midGap = options.midgap or "0.4em"
      local bottomGap = options.bottomgap or "0.35em"
      local leftGap = options.leftgap or "-6pt"
      local rightGap = options.rightgap or "-6pt"

      SILE.call("skip", { height = topGap })

      local ts = SILE.typesetter
      local bw = toNum(SU.cast("length", borderw))
      local lg = toNum(SU.cast("length", leftGap))
      local rg = toNum(SU.cast("length", rightGap))

      -- Track continuous vertical rules across glue by aggregating extents per page and section instance.
      SILE.scratch.__sectionbox_state = SILE.scratch.__sectionbox_state or {}
      SILE.scratch.__sectionbox_opts = SILE.scratch.__sectionbox_opts or {}
      SILE.scratch.__sectionbox_uid = (SILE.scratch.__sectionbox_uid or 0) + 1
      local uid = SILE.scratch.__sectionbox_uid
      SILE.scratch.__sectionbox_opts[uid] = { color = color, bw = bw }
      local function currentFolio()
        local c = SILE.scratch and SILE.scratch.counters and SILE.scratch.counters.folio
        return (c and c.value) or 1
      end

      local innerContent = function ()
        local function goldOutsetHrule()
          SILE.settings:temporarily(function ()
            SILE.call("set", { parameter = "document.lskip", value = leftGap })
            SILE.call("set", { parameter = "document.rskip", value = rightGap })
            SILE.call("Gold", {}, function ()
              SILE.call("hrule", { height = borderw, width = "100%lw" })
            end)
            SILE.call("par")
          end)
        end

        goldOutsetHrule()
        SILE.call("skip", { height = midGap })
        SILE.process(content)
        SILE.call("skip", { height = midGap })
        goldOutsetHrule()
      end

      ts:liner("sectionbox", innerContent, function (self, typesetter, line)
        local x = (typesetter.frame and typesetter.frame.state and typesetter.frame.state.cursorX) or 0
        local y = (typesetter.frame and typesetter.frame.state and typesetter.frame.state.cursorY) or 0

        local top = y-bw
        local bottom = y
        local f = typesetter.frame
        local left = ((f and f.left and toNum(f:left())) or x) + lg
        local right = ((f and f.right and toNum(f:right())) or x) - rg

        -- Aggregate extents per page and draw a continuous rule spanning all intervening glue.
        local folio = currentFolio()
        local st = SILE.scratch.__sectionbox_state
        st[folio] = st[folio] or {}
        local bs = st[folio][uid]
        if not bs then
          bs = { xL = left, xR = right, yTop = top, yBottom = bottom }
        else
          if left < bs.xL then bs.xL = left end
          if right > bs.xR then bs.xR = right end
          if top < bs.yTop then bs.yTop = top end
          if bottom > bs.yBottom then bs.yBottom = bottom end
        end
        st[folio][uid] = bs

        -- Defer drawing to endPage; only aggregate extents here.

        -- Output the actual line content
        self:outputContent(typesetter, line)
      end)

      SILE.call("skip", { height = bottomGap })
    end)
  end
}

% Bulletless lists with customizable spacing between items.
% Usage: \itemize[itemsep=0.35em]{ \item{First} \item{Second} }
% If itemsep is omitted, a default compact spacing is used.
\lua{
  if not SILE.scratch then SILE.scratch = {} end
  SILE.scratch.hr_list = SILE.scratch.hr_list or { itemsep_default = "0.35em" }

  local function _hr_noindent()
    SILE.settings:set("current.parindent", SILE.types.node.glue())
    SILE.settings:set("document.lskip", SILE.types.node.glue())
    SILE.settings:set("document.rskip", SILE.types.node.glue())
  end

  local class = SILE.documentState.documentClass

  -- Override itemize to suppress bullets and allow customizable spacing (scoped to this class).
  class:registerCommand("itemize", function (options, content)
    local sep = options.itemsep or SILE.scratch.hr_list.itemsep_default

    -- Save any existing class-level \item to restore after processing.
    local prevItem = nil
    if class._registeredCommands and class._registeredCommands["item"] then
      prevItem = class._registeredCommands["item"]
    end

    -- Temporarily override \item within this list only.
    class:registerCommand("item", function (opts, cont)
      _hr_noindent()
      SILE.process(cont)
      SILE.call("par")
      SILE.call("skip", { height = sep })
    end)

    SILE.process(content)

    -- Restore original \item definition on this class (or clear it).
    if prevItem then
      class:registerCommand("item", prevItem)
    elseif class._registeredCommands then
      class._registeredCommands["item"] = nil
    end
  end)
}

% Vertical fill to push remaining content to the bottom of the page
\define[command=verticalfill]{
  \skip[height=0pt plus 1000pt]
}

% Running header: Left title + right-aligned ISO date
\define[command=hrHeader]{\font[family=JetBrains Mono, weight=700, size=12pt]{\Accent{Holdenâ€™s Daily Report}\hfill\Accent{\lua{SILE.typesetter:typeset(os.date("%A %Y-%m-%d"))}}}}

% Running footer content and style (high-level styling)
\define[command=runningFooter]{
  \Subtle{\font[family=JetBrains Mono, size=9pt]{Page \hrPageNum}}
}



% Helper: typeset the current page number (folio) safely
\define[command=hrPageNum]{
  \lua{
    local folio = (SILE and SILE.scratch and SILE.scratch.counters and SILE.scratch.counters.folio and SILE.scratch.counters.folio.value) or 1
    SILE.typesetter:typeset(tostring(folio))
  }
}

% Minimal frame-like vertical spacing to simulate top/bottom margins
\define[command=pagetop]{
  \skip[height=0.75in]
}
\define[command=pagebottom]{
  \skip[height=0.5in]
}

% Load report data via a standard JSON library if available
\define[command=loaddata]{
  \lua{
    -- Allow local vendored libs if later added (sile/lib/?.lua)
    local added = "sile/lib/?.lua;"
    if not string.find(package.path, added, 1, true) then
      package.path = added .. package.path
    end

    -- Try common JSON libraries in order (no custom parsers)
    local candidates = { "cjson.safe", "cjson", "dkjson", "json" }
    local json, libname
    for _, name in ipairs(candidates) do
      local ok, mod = pcall(require, name)
      if ok and mod then
        json, libname = mod, name
        break
      end
    end
    SILE.scratch.json = json
    SILE.scratch.json_lib = libname

    local path = os.getenv("REPORT_DATA_JSON") or "data/data.json"
    SILE.scratch.report_data_path = path

    local fh = io.open(path, "rb")
    if not fh then
      SILE.typesetter:typeset("Could not open data file: " .. path)
      return
    end
    local content = fh:read("*a")
    fh:close()

    if not json then
      SILE.typesetter:typeset("No JSON library found (tried cjson.safe, cjson, dkjson, json).")
      return
    end

    local ok, data
    if json.decode then
      ok, data = pcall(json.decode, content)
    elseif json.parse then
      ok, data = pcall(json.parse, content)
    else
      ok, data = false, nil
    end
    if not ok or type(data) ~= "table" then
      SILE.typesetter:typeset("Failed to parse JSON with " .. tostring(libname or "unknown"))
      return
    end

    SILE.scratch.report_data = data
  }
}

% JSON helper to load a file into a Lua table using the shared library
\lua{
  function SILE.scratch.load_json_file(path)
    local fh = io.open(path, "rb")
    if not fh then return nil, "open" end
    local content = fh:read("*a"); fh:close()
    local json = SILE.scratch.json
    if not json then return nil, "jsonlib" end
    local decode = json.decode or json.parse
    if not decode then return nil, "decode" end
    local ok, data = pcall(decode, content)
    if not ok or type(data) ~= "table" then return nil, "parse" end
    return data
  end
}

% Render a minimal overview of loaded data into a section box
\define[command=renderdataoverview]{
  \lua{
    local data = SILE.scratch.report_data
    if not data then
      local lib = SILE.scratch.json_lib or "none"
      SILE.typesetter:typeset("Data not loaded; JSON lib: " .. tostring(lib) .. ".")
      return
    end
    local sections = (type(data.sections) == "table") and data.sections or {}
    local order = { "rss", "wikipedia", "api_spend", "youtube", "facebook", "caldav", "weather" }
    local parts = {}
    for _, key in ipairs(order) do
      local sec = sections[key]
      local count = 0
      if type(sec) == "table" then
        if key == "wikipedia" then
          count = (type(sec.summary) == "string" and #sec.summary > 0) and 1 or 0
        elseif type(sec.items) == "table" then
          count = #sec.items
        end
      end
      parts[#parts + 1] = key .. "=" .. tostring(count)
    end
    SILE.typesetter:typeset("Sections: " .. table.concat(parts, "; "))
  }
}
